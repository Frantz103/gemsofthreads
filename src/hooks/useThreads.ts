import { useQuery } from '@tanstack/react-query';
import { StaticThreadsService } from '@/services/staticThreads';
import { Thread } from '@/types/threads';

export const useDesignThreads = () => {
  return useQuery<Thread[], Error>({
    queryKey: ['threads', 'design-ui'],
    queryFn: () => StaticThreadsService.getAllThreads(),
    staleTime: 60 * 60 * 1000, // 1 hour (very long since data is pre-generated)
    retry: 3,
    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 10000),
  });
};

export const useThreadsByType = (type: 'all' | 'text' | 'images') => {
  return useQuery<Thread[], Error>({
    queryKey: ['threads', 'by-type', type],
    queryFn: () => StaticThreadsService.getThreadsByType(type),
    staleTime: 60 * 60 * 1000, // 1 hour
    retry: 2,
  });
};

export const useRecentThreads = () => {
  return useQuery<Thread[], Error>({
    queryKey: ['threads', 'recent'],
    queryFn: () => StaticThreadsService.getRecentThreads(),
    staleTime: 30 * 60 * 1000, // 30 minutes
    retry: 2,
  });
};

export const useDataManifest = () => {
  return useQuery({
    queryKey: ['threads', 'manifest'],
    queryFn: () => StaticThreadsService.getManifest(),
    staleTime: 10 * 60 * 1000, // 10 minutes
    retry: 1,
  });
};

export const useDataStatistics = () => {
  return useQuery({
    queryKey: ['threads', 'statistics'],
    queryFn: () => StaticThreadsService.getStatistics(),
    staleTime: 15 * 60 * 1000, // 15 minutes
    retry: 1,
  });
};

// Note: Data updates are handled by the Python script (update_data.py)
// These hooks consume the static JSON files generated by the Python script

export const useProfileThreads = (username: string, limit: number = 25) => {
  return useQuery<Thread[], Error>({
    queryKey: ['threads', 'profile', username, limit],
    queryFn: () => ThreadsApiService.getProfilePosts(username, limit),
    enabled: !!username,
    staleTime: 5 * 60 * 1000, // 5 minutes
    retry: 2,
    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
  });
};

export const useThread = (mediaId: string) => {
  return useQuery<Thread, Error>({
    queryKey: ['thread', mediaId],
    queryFn: () => ThreadsApiService.getThread(mediaId),
    enabled: !!mediaId,
    staleTime: 10 * 60 * 1000, // 10 minutes
    retry: 2,
  });
};